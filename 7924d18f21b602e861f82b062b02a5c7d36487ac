{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f21d139_2dd63eff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "I\u0027m not entirely sure this is tight enough yet to be useful; maybe it should still be considered to be in Ideation phase?",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fe8cf89_2b04dcca",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "extra newline before section?",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3d57eaf_1e49ae49",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fe8cf89_2b04dcca",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e20041ce_f83ad7d7",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "What\u0027s the difference between \"schema\" and \"validation\"?",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3c6667f_2cdc4275",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "e20041ce_f83ad7d7",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42ec03fd_fdb3e38c",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "... but nonetheless we\u0027re still proposing to use MVS for non-schema CUE. It might be good to expand on that a bit somewhere in this document.",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9725f3df_0f6d083d",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "I think we just don\u0027t know how that is gonna pan out yet. But I\u0027ll not something along those lines.",
      "parentUuid": "42ec03fd_fdb3e38c",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57146f57_c357630d",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "9725f3df_0f6d083d",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0134152d_a67bfead",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "extra newline before section.",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0ee5c99_00e1143d",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0134152d_a67bfead",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ce9ea9f_0baf2c7a",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "\"to only\" reads awkwardly.\nMaybe:\nWe propose to support backwards compatibility checks for definitions only. ?\n\nAlso, I thought you weren\u0027t keen on parentheses ðŸ˜Š",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a209921f_059bfa74",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Changed.\n\nSometimes it is okay to clarify a definition, especially abbreviations, as long as it is not a substitute for properly structuring sentences.\n\nBut the only made its use ugly indeed. So restructured it to define definitions in the Background section instead.",
      "parentUuid": "8ce9ea9f_0baf2c7a",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cb7483ef_5e7d552c",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "a209921f_059bfa74",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db64530f_8e59937f",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "extra newline before section?",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d5f22d5_144b113c",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "I usually skip it if another section heading is preceding it.",
      "parentUuid": "db64530f_8e59937f",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4feafe7c_b9448aca",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3d5f22d5_144b113c",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acc07361_81fef814",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "s/said to backwards/said to be backwards/\n\nAlso, what exactly is a \"configuration\" here? A package, I\u0027m guessing, but it\u0027s not entirely clear. If it\u0027s a package, do definitions not at the top level count towards backward compatibility?",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42509e87_5980c445",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "I think that definitions not at the top level and that are accessible by the importer, so not hidden, should indeed also be checked.\n\nInitially I considered only top level, which is what is reflected here.\n\nMade it clearer this holds for any definition within a configuration.\n\nInstead of configuration we could also use \"CUE Program\". We should standardize on a name.",
      "parentUuid": "acc07361_81fef814",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "420823a5_0210fbdf",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "\u003e I think that definitions not at the top level and that are accessible by the importer, so not hidden, should indeed also be checked.\n\nI suspect that will be problematic, as definitions are currently in common use to define parameters and other non-exported aspects of a configuration because there\u0027s no other alternative that\u0027s available to other packages. There\u0027s definitely a feature-gap here.\n\n\u003e Instead of configuration we could also use \"CUE Program\". We should standardize on a name.\n\nNeither \"configuration\" nor \"CUE program\" seem very well defined to me currently. \"Package\" is better; \"module\" might also be a possibility, but then that would have to leverage some package-level definition too. In fact, module-level compatibility is a necessity for defining module versioning and isn\u0027t talked about in this document at all. For example, I don\u0027t think there\u0027s anywhere that says it\u0027s backwardly incompatible to remove a package from a module.",
      "parentUuid": "42509e87_5980c445",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65eafeeb_a9c97f8d",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T13:58:07Z",
      "side": 1,
      "message": "I know there is a feature gap. That is why the check is not mandatory. The feasibility of this really all depends on how configurations look like in real life.\n\nUsing package now.",
      "parentUuid": "420823a5_0210fbdf",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fab4b3a2_064f8218",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "I\u0027m not convinced by \"a regular field may become a required field\". What about this example, where changing a regular field to a required field causes breakage?\n\nThis test case fails, for example: https://gist.github.com/rogpeppe/8d3683c917e7182bc6bdea744ae2ea9b",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f542096_0f296d05",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "This rule is a direct consequence of the subsumption relation.\n\nYour argument also holds for allowing to relax a field (next rule).\n\nGenerally, it is discouraged to put regular fields in definitions, which should mitigate this issue. In this case, a vet rule should probably warn a schema writer of future compatibility issues arising from the fact that the schema is a template hybrid.\n\nThe discussion also lays out what responsibility schema users have in ensuring that their configurations are compatible.\n\nAnyway, I see why this is a trickier case, but I would prefer to rather distill the specific rules from practice rather than hypothesizing here. It is not clear to me this will be a problem in practice after required fields have been ubiquitously adopted.",
      "parentUuid": "fab4b3a2_064f8218",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5af7b0_ac105fab",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "\u003e Your argument also holds for allowing to relax a field (next rule).\n\nI wondered if that might be the case, but couldn\u0027t come up with a concrete example where it would do so.\n\n\u003e Generally, it is discouraged to put regular fields in definitions, which should mitigate this issue. In this case, a vet rule should probably warn a schema writer of future compatibility issues arising from the fact that the schema is a template hybrid.\n\nYeah, one possibility could be to say that a definition containing a regular field does not participate in backwards-compatibility checking because our compatibility checking is defined for pure schema only.\n\nWe could produce an error for definitions that have regular fields unless some annotation is added.\n\n\u003e Anyway, I see why this is a trickier case, but I would prefer to rather distill the specific rules from practice rather than hypothesizing here. It is not clear to me this will be a problem in practice after required fields have been ubiquitously adopted.\n\nThe concern I have here is that the goals for backward compatibility have not been explicitly stated and, as I demonstrated, even when someone does adhere to the rules they might still encounter breakage. So I\u0027m not entirely convinced how useful this checking is.\n\nI agree about distilling specific rules from practice, but ISTM that would be an argument for postponing the rules defined in this document until we\u0027ve actually experimented with them in practice for real CUE code.\n\nThat is, the rules in this document seem to me to be half way between theory (subsumption) and practice (schema only) but I think more experimentation is needed to see if the right balance has been struck.",
      "parentUuid": "4f542096_0f296d05",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51a80e1c_8268236a",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T13:58:07Z",
      "side": 1,
      "message": "\u003e \u003e Your argument also holds for allowing to relax a field (next rule).\n\u003e \n\u003e I wondered if that might be the case, but couldn\u0027t come up with a concrete example where it would do so.\nThere is an example in the discussion below.\n\n\n\u003e \u003e Generally, it is discouraged to put regular fields in definitions, which should mitigate this issue. In this case, a vet rule should probably warn a schema writer of future compatibility issues arising from the fact that the schema is a template hybrid.\n\u003e \n\u003e Yeah, one possibility could be to say that a definition containing a regular field does not participate in backwards-compatibility checking because our compatibility checking is defined for pure schema only.\nThat is a possibility indeed. We need data to see if that works in practice.\n \n\u003e We could produce an error for definitions that have regular fields unless some annotation is added.\nAlso a possibility.\n\n\u003e \u003e Anyway, I see why this is a trickier case, but I would prefer to rather distill the specific rules from practice rather than hypothesizing here. It is not clear to me this will be a problem in practice after required fields have been ubiquitously adopted.\n\u003e \n\u003e The concern I have here is that the goals for backward compatibility have not been explicitly stated and, as I demonstrated, even when someone does adhere to the rules they might still encounter breakage. So I\u0027m not entirely convinced how useful this checking is.\n\nI think the main purpose is for module writers to verify that they are not _inadvertently_ are breaking compatibility. Similar problems exist for Go. The Go tooling does API validation that is quite strict and often wrong. Yet it is very useful and catches a lot of errors.\n\n\n\u003e I agree about distilling specific rules from practice, but ISTM that would be an argument for postponing the rules defined in this document until we\u0027ve actually experimented with them in practice for real CUE code.\n\nI strongly disagree. The rules here are principled, from a theoretical point of view, and a good starting point for figuring out what we need in practice. Without such seeding it is futile.\n\nAlso, MVS is useless without a notion of backwards compatibility. We should either include this or also remove MVS from the proposal.\n\n\n\u003e That is, the rules in this document seem to me to be half way between theory (subsumption) and practice (schema only) but I think more experimentation is needed to see if the right balance has been struck.\n\nAgain. Strongly disagree. This is a draft, not a final proposal. We need to address this in relation to MVS, even if incomplete.",
      "parentUuid": "1f5af7b0_ac105fab",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afb6b50d_d49aa28e",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "Given that CUE doesn\u0027t distinguish between them, it would be good to have some definition of how one would distinguish between \"data\", \"templates\" and \"policy\".",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33400119_f1c1349b",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "added a brief explanation in the background.",
      "parentUuid": "afb6b50d_d49aa28e",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3938203_9fbfadd5",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "33400119_f1c1349b",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3834962_63ca7c0a",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "extra newline before section.",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d205dae_6fe9b1c9",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3834962_63ca7c0a",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "668a2c6f_96049428",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "Given that\u0027s got a regular field, is it actually a template...?\nMaybe best just to say \"definition\".",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68189804_27da1bd7",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "By the definition of Schema earlier in the document, I think this is _not_ a schema FWIW, because `gauge: ...` is not a field constraint, but an actual field.",
      "parentUuid": "668a2c6f_96049428",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61ccad5d_e59a1fb3",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T13:58:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68189804_27da1bd7",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92369ee1_83eafb4d",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "extra newline before section.",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d6f64e6_9f052f7b",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92369ee1_83eafb4d",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f376bd48_0aa462a2",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T11:02:39Z",
      "side": 1,
      "message": "I might have missed it, but I don\u0027t think this document has mentioned about what kind of compatibility is being talked about, so it seems a little odd to start distinguishing here. Perhaps it would be good to say near the start of the document, at least informally, what \"compatibility\" means for the purposes of this document.",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d930b65_2949f3cb",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1013536
      },
      "writtenOn": "2023-06-20T11:49:28Z",
      "side": 1,
      "message": "I think it does, it mentions backwards compatibility throughout. ðŸ˜Š\nAnd we state that the backwards compatibility is defined by subsumption.\n\nReiterated the subsumption part here.",
      "parentUuid": "f376bd48_0aa462a2",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a335c1d_61da04d9",
        "filename": "designs/modules/2451-modules-compat.md",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 1007275
      },
      "writtenOn": "2023-06-20T12:32:19Z",
      "side": 1,
      "message": "But what does \"compatibility\" actually _mean_?\n\nI think we\u0027re missing overarching goal for what we mean be compatibility with respect to modules, so we can have something to measure compatibility by. Maybe something like the following?\n\n\u003e Module B is compatible with module A if A can be substituted with B without causing an error.",
      "parentUuid": "6d930b65_2949f3cb",
      "revId": "7924d18f21b602e861f82b062b02a5c7d36487ac",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}